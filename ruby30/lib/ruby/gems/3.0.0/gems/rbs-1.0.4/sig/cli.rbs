module RBS
  class CLI
    class LibraryOptions
      attr_accessor core_root: Pathname?

      attr_reader libs: Array[String]
      attr_reader dirs: Array[String]
      attr_reader repos: Array[String]

      def initialize: () -> void
                    
      def loader: () -> EnvironmentLoader
    end

    attr_reader stdout: IO
    attr_reader stderr: IO

    def initialize: (stdout: IO, stderr: IO) -> void
                  
    COMMANDS: Array[Symbol]

    def library_parse: (OptionParser, options: LibraryOptions) -> void
                     
    def parse_logging_options: (OptionParser) -> void
                             
    def has_parser?: () -> bool
                   
    def run: (Array[String] args) -> void
           
    def run_ast: (Array[String], LibraryOptions) -> void
               
    def run_list: (Array[String], LibraryOptions) -> void
                
    def run_ancestors: (Array[String], LibraryOptions) -> void
                     
    def run_methods: (Array[String], LibraryOptions) -> void
                   
    def run_method: (Array[String], LibraryOptions) -> void
                  
    def run_validate: (Array[String], LibraryOptions) -> void
                    
    def run_constant: (Array[String], LibraryOptions) -> void
                    
    def run_paths: (Array[String], LibraryOptions) -> void
                 
    def run_prototype: (Array[String], LibraryOptions) -> void
                     
    def run_prototype_file: (String format, Array[String]) -> void
                          
    def run_vendor: (Array[String], LibraryOptions) -> void
                  
    def run_parse: (Array[String], LibraryOptions) -> void
                 
    def run_test: (Array[String], LibraryOptions) -> void
                
    def test_opt: (LibraryOptions) -> String?
  end
end
